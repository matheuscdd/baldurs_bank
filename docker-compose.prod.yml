name: "baldurs-prod"
services:
  rabbitmq:
    image: rabbitmq:4-management
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASSWORD}"
    networks:
      - net
  pgsql:
    restart: always
    image: postgres
    environment:
      POSTGRES_USER: "${PGSQL_USER}"
      POSTGRES_PASSWORD: "${PGSQL_PASSWORD}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./pgsql:/docker-entrypoint-initdb.d
    networks:
      - net
  aux:
    build:
      context: ./backends
      dockerfile: Dockerfile.aux
    image: aux
    environment:
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_USER: "${RABBITMQ_USER}"
      RABBITMQ_PASSWORD: "${RABBITMQ_PASSWORD}"
      PGSQL_URL_USERS: "Host=pgsql;Port=5432;Database=db_users;Username=${PGSQL_USER};Password=${PGSQL_PASSWORD}"
      PGSQL_URL_ACCOUNTS: "Host=pgsql;Port=5432;Database=db_accounts;Username=${PGSQL_USER};Password=${PGSQL_PASSWORD}"
      PGSQL_URL_TRANSACTIONS: "Host=pgsql;Port=5432;Database=db_transactions;Username=${PGSQL_USER};Password=${PGSQL_PASSWORD}"
    volumes:
      - ./firebase.back.json:/app/user/src/Api/firebase.back.json:ro
      - ./firebase.back.json:/app/account/src/Api/firebase.back.json:ro
      - ./firebase.back.json:/app/transaction/src/Api/firebase.back.json:ro
    networks:
      - net
    depends_on:
      - pgsql
  orchestrator:
    restart: always
    build:
      context: ./backends/orchestrator
      dockerfile: Dockerfile.prod
    image: orchestrator
    environment:
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_USER: "${RABBITMQ_USER}"
      RABBITMQ_PASSWORD: "${RABBITMQ_PASSWORD}"
    networks:
      - net
    depends_on:
      - pgsql
      - rabbitmq
  user:
    restart: always
    build:
      context: ./backends/user
      dockerfile: Dockerfile.prod
    image: user
    environment:
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_USER: "${RABBITMQ_USER}"
      RABBITMQ_PASSWORD: "${RABBITMQ_PASSWORD}"
      PGSQL_URL_USERS: "Host=pgsql;Port=5432;Database=db_users;Username=${PGSQL_USER};Password=${PGSQL_PASSWORD}"
    volumes:
      - ./firebase.back.json:/app/firebase.back.json:ro
    networks:
      - net
    depends_on:
      - pgsql
      - rabbitmq
      - orchestrator
  account:
    restart: always
    build:
      context: ./backends/account
      dockerfile: Dockerfile.prod
    image: account
    environment:
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_USER: "${RABBITMQ_USER}"
      RABBITMQ_PASSWORD: "${RABBITMQ_PASSWORD}"
      PGSQL_URL_ACCOUNTS: "Host=pgsql;Port=5432;Database=db_accounts;Username=${PGSQL_USER};Password=${PGSQL_PASSWORD}"
    volumes:
      - ./firebase.back.json:/app/firebase.back.json:ro
    networks:
      - net
    depends_on:
      - pgsql
      - rabbitmq
      - orchestrator
  transaction:
    restart: always
    build:
      context: ./backends/transaction
      dockerfile: Dockerfile.prod
    image: transaction
    environment:
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_USER: "${RABBITMQ_USER}"
      RABBITMQ_PASSWORD: "${RABBITMQ_PASSWORD}"
      PGSQL_URL_TRANSACTIONS: "Host=pgsql;Port=5432;Database=db_transactions;Username=${PGSQL_USER};Password=${PGSQL_PASSWORD}"
    volumes:
      - ./firebase.back.json:/app/firebase.back.json:ro
    networks:
      - net
    depends_on:
      - pgsql
      - rabbitmq
      - orchestrator
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        API_URL: "http://localhost/api"
        FIREBASE_API_KEY: "${FIREBASE_API_KEY}"
        FIREBASE_AUTH_DOMAIN: "${FIREBASE_AUTH_DOMAIN}"
        FIREBASE_DATABASE_URL: "${FIREBASE_DATABASE_URL}"
        FIREBASE_PROJECT_ID: "${FIREBASE_PROJECT_ID}"
        FIREBASE_STORAGE_BUCKET: "${FIREBASE_STORAGE_BUCKET}"
        FIREBASE_MESSAGING_SENDER_ID: "${FIREBASE_MESSAGING_SENDER_ID}"
        FIREBASE_APP_ID: "${FIREBASE_APP_ID}"
        FIREBASE_MEASUREMENT_ID: "${FIREBASE_MEASUREMENT_ID}"
    image: frontend
    volumes:
      - ./frontend/app:/app
      - /app/node_modules
    networks:
      - net
    depends_on:
      - orchestrator
  nginx:
    restart: always
    build:
        context: ./nginx
        dockerfile: Dockerfile.prod
    image: nginx
    ports:
        - '80:80'
        - '443:443'
    depends_on:
        - frontend
        - orchestrator
    networks:
        - net
    
networks:
  net:
    driver: bridge
volumes:
  postgres_data:
